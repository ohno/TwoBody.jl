var documenterSearchIndex = {"docs":
[{"location":"Rayleigh–Ritz/","page":"Rayleigh–Ritz method","title":"Rayleigh–Ritz method","text":"CurrentModule = TwoBody","category":"page"},{"location":"Rayleigh–Ritz/#Rayleigh–Ritz-method","page":"Rayleigh–Ritz method","title":"Rayleigh–Ritz method","text":"","category":"section"},{"location":"Rayleigh–Ritz/","page":"Rayleigh–Ritz method","title":"Rayleigh–Ritz method","text":"The solver finds the best c_i for the trial wavefunction","category":"page"},{"location":"Rayleigh–Ritz/","page":"Rayleigh–Ritz method","title":"Rayleigh–Ritz method","text":"varPsi(r) = sum_i c_i phi_i(r)","category":"page"},{"location":"Rayleigh–Ritz/","page":"Rayleigh–Ritz method","title":"Rayleigh–Ritz method","text":"to minmize the expectation value of the energy","category":"page"},{"location":"Rayleigh–Ritz/","page":"Rayleigh–Ritz method","title":"Rayleigh–Ritz method","text":"E = fraclanglepsihatHpsiranglelanglepsipsirangle","category":"page"},{"location":"Rayleigh–Ritz/","page":"Rayleigh–Ritz method","title":"Rayleigh–Ritz method","text":"Here, the energy by trial wavefunction is the upper bound for the exact energy.","category":"page"},{"location":"Rayleigh–Ritz/#Exaples","page":"Rayleigh–Ritz method","title":"Exaples","text":"","category":"section"},{"location":"Rayleigh–Ritz/","page":"Rayleigh–Ritz method","title":"Rayleigh–Ritz method","text":"using TwoBody","category":"page"},{"location":"Rayleigh–Ritz/","page":"Rayleigh–Ritz method","title":"Rayleigh–Ritz method","text":"Define the Hamiltoninan. This is an example for the non-relativistic Hamiltonian of hydrogen atom in atomic units:","category":"page"},{"location":"Rayleigh–Ritz/","page":"Rayleigh–Ritz method","title":"Rayleigh–Ritz method","text":"hatH = \n- frac12 nabla^2\n- frac1r","category":"page"},{"location":"Rayleigh–Ritz/","page":"Rayleigh–Ritz method","title":"Rayleigh–Ritz method","text":"hamiltonian = Hamiltonian(\n  NonRelativisticKinetic(ℏ = 1 , m = 1),\n  CoulombPotential(coefficient = -1),\n)\nnothing # hide","category":"page"},{"location":"Rayleigh–Ritz/","page":"Rayleigh–Ritz method","title":"Rayleigh–Ritz method","text":"Define the basis set:","category":"page"},{"location":"Rayleigh–Ritz/","page":"Rayleigh–Ritz method","title":"Rayleigh–Ritz method","text":"beginaligned\n  phi_1(r) = exp(-1300773 r^2) \n  phi_2(r) = exp(-1962079 r^2) \n  phi_3(r) = exp(-0444529 r^2) \n  phi_4(r) = exp(-01219492 r^2)\nendaligned","category":"page"},{"location":"Rayleigh–Ritz/","page":"Rayleigh–Ritz method","title":"Rayleigh–Ritz method","text":"basisset = BasisSet(\n  SimpleGaussianBasis(13.00773),\n  SimpleGaussianBasis(1.962079),\n  SimpleGaussianBasis(0.444529),\n  SimpleGaussianBasis(0.1219492),\n)\nnothing # hide","category":"page"},{"location":"Rayleigh–Ritz/","page":"Rayleigh–Ritz method","title":"Rayleigh–Ritz method","text":"You should find","category":"page"},{"location":"Rayleigh–Ritz/","page":"Rayleigh–Ritz method","title":"Rayleigh–Ritz method","text":"E_n=1 = -0499278E_mathrmh","category":"page"},{"location":"Rayleigh–Ritz/","page":"Rayleigh–Ritz method","title":"Rayleigh–Ritz method","text":"which is amazingly good for only four basis functions according to Thijssen(2007). The exact ground-state energy is -05E_mathrmh.","category":"page"},{"location":"Rayleigh–Ritz/","page":"Rayleigh–Ritz method","title":"Rayleigh–Ritz method","text":"solve(hamiltonian, basisset)","category":"page"},{"location":"Rayleigh–Ritz/#Solver","page":"Rayleigh–Ritz method","title":"Solver","text":"","category":"section"},{"location":"Rayleigh–Ritz/","page":"Rayleigh–Ritz method","title":"Rayleigh–Ritz method","text":"TwoBody.solve\nTwoBody.optimize","category":"page"},{"location":"Rayleigh–Ritz/#TwoBody.solve-Rayleigh–Ritz","page":"Rayleigh–Ritz method","title":"TwoBody.solve","text":"solve(hamiltonian::Hamiltonian, basisset::BasisSet)\n\nThis function returns the eigenvalues E  and eigenvectors pmbc for\n\npmbH pmbc = E pmbS pmbc\n\nThe Hamiltonian matrix is defined as H_ij = langle phi_i  hatH  phi_j rangle. The overlap matrix is defined as S_ij = langle phi_i  phi_j rangle.\n\n\n\n\n\nsolve(hamiltonian::Hamiltonian, basisset::GeometricBasisSet; perturbation=Hamiltonian(), info=4) This function is a wrapper for solve(hamiltonian::Hamiltonian, basisset::BasisSet, ...).\n\n\n\n\n\n","category":"function"},{"location":"Rayleigh–Ritz/#TwoBody.optimize-Rayleigh–Ritz","page":"Rayleigh–Ritz method","title":"TwoBody.optimize","text":"optimize(hamiltonian::Hamiltonian, basisset::GeometricBasisSet; perturbation=Hamiltonian(), info=4, optimizer=Optim.NelderMead()) This function minimizes the energy by optimizing r_1 and r_n using Optim.jl.\n\nfracpartial Epartial r_1 = fracpartial Epartial r_n = 0\n\n\n\n\n\n","category":"function"},{"location":"Rayleigh–Ritz/#Basis-Set","page":"Rayleigh–Ritz method","title":"Basis Set","text":"","category":"section"},{"location":"Rayleigh–Ritz/","page":"Rayleigh–Ritz method","title":"Rayleigh–Ritz method","text":"TwoBody.BasisSet\nTwoBody.GeometricBasisSet\nTwoBody.geometric","category":"page"},{"location":"Rayleigh–Ritz/#TwoBody.BasisSet-Rayleigh–Ritz","page":"Rayleigh–Ritz method","title":"TwoBody.BasisSet","text":"BasisSet(basis1, basis2, ...)\n\n phi_1 phi_2 phi_3 cdots  \n\nThe basis set is the input for Rayleigh–Ritz method. You can define the basis set like this:\n\nbeginaligned\n  phi_1(r) = exp(-1300773 r^2) \n  phi_2(r) = exp(-1962079 r^2) \n  phi_3(r) = exp(-0444529 r^2) \n  phi_4(r) = exp(-01219492 r^2)\nendaligned\n\nbasisset = BasisSet(\n  SimpleGaussianBasis(13.00773),\n  SimpleGaussianBasis(1.962079),\n  SimpleGaussianBasis(0.444529),\n  SimpleGaussianBasis(0.1219492),\n)\n\n\n\n\n\n","category":"type"},{"location":"Rayleigh–Ritz/#TwoBody.GeometricBasisSet-Rayleigh–Ritz","page":"Rayleigh–Ritz method","title":"TwoBody.GeometricBasisSet","text":"GeometricBasisSet(basistype, r₁, rₙ, n; nₘₐₓ=n, nₘᵢₙ=1) This is a basis set with exponentials generated by geometric().\n\n\n\n\n\n","category":"type"},{"location":"Rayleigh–Ritz/#TwoBody.geometric-Rayleigh–Ritz","page":"Rayleigh–Ritz method","title":"TwoBody.geometric","text":"Exponents of Gaussian basis functions are given by geometric progression:\n\nbeginaligned\n   v_i = frac1r_i^2 \n   r_i = r_1 a^i-1\nendaligned\n\nThis function return array of nu_i:\n\n(r_1 r_n n n_mathrmmax) mapsto (nu_1 nu_2 cdots nu_n-1 nu_n nu_n+1 cdots nu_n_mathrmmax)\n\nUsually n = n_mathrmmax. Set nn_mathrmmax if you want to extend the geometric progression.\n\nExamples:\n\njulia> ν = TwoBody.geometric(0.1, 10.0, 5)\n5-element Vector{Float64}:\n 100.0\n  10.0\n   0.9999999999999997\n   0.09999999999999996\n   0.009999999999999995\n\njulia> ν = TwoBody.geometric(0.1, 10.0, 5, nₘₐₓ = 10)\n10-element Vector{Float64}:\n 100.0\n  10.0\n   0.9999999999999997\n   0.09999999999999996\n   0.009999999999999995\n   0.0009999999999999994\n   9.999999999999994e-5\n   9.999999999999992e-6\n   9.999999999999991e-7\n   9.999999999999988e-8\n\n\n\n\n\n","category":"function"},{"location":"Rayleigh–Ritz/#Basis-Functions","page":"Rayleigh–Ritz method","title":"Basis Functions","text":"","category":"section"},{"location":"Rayleigh–Ritz/","page":"Rayleigh–Ritz method","title":"Rayleigh–Ritz method","text":"TwoBody.SimpleGaussianBasis\nTwoBody.GaussianBasis\nTwoBody.ContractedBasis","category":"page"},{"location":"Rayleigh–Ritz/#TwoBody.SimpleGaussianBasis-Rayleigh–Ritz","page":"Rayleigh–Ritz method","title":"TwoBody.SimpleGaussianBasis","text":"SimpleGaussianBasis(a=1)\n\nphi_i(r) = exp(-a_i r^2)\n\nNote: This basis is not normalized. This is only for s-wave.\n\n\n\n\n\n","category":"type"},{"location":"Rayleigh–Ritz/#TwoBody.GaussianBasis-Rayleigh–Ritz","page":"Rayleigh–Ritz method","title":"TwoBody.GaussianBasis","text":"GaussianBasis(a=1, l=0, m=0)\n\nphi_i(r θ φ) = N _il r^l exp(-a_i r^2) Y_l^m(θ φ)\n\n\n\n\n\n","category":"type"},{"location":"Rayleigh–Ritz/#TwoBody.ContractedBasis-Rayleigh–Ritz","page":"Rayleigh–Ritz method","title":"TwoBody.ContractedBasis","text":"ContractedBasis([c1, c2, ...], [basis1, basis2, ...])\n\nphi = sum_i c_i phi_i\n\n\n\n\n\n","category":"type"},{"location":"Rayleigh–Ritz/#Matrix-Elements","page":"Rayleigh–Ritz method","title":"Matrix Elements","text":"","category":"section"},{"location":"Rayleigh–Ritz/","page":"Rayleigh–Ritz method","title":"Rayleigh–Ritz method","text":"TwoBody.element","category":"page"},{"location":"Rayleigh–Ritz/#TwoBody.element-Rayleigh–Ritz","page":"Rayleigh–Ritz method","title":"TwoBody.element","text":"element(SGB1::SimpleGaussianBasis, SGB2::SimpleGaussianBasis)\n\nbeginaligned\n   S_ij\n    = langle phi_i  phi_j rangle\n   = iiint\n      phi_i^*(r)\n      phi_j(r)\n      r^2 sintheta mathrmdr mathrmdtheta mathrmdvarphi \n   = int_0^2pi mathrmdvarphi\n      int_0^pi sintheta mathrmdtheta\n      int_0^infty r^2 mathrme^-(alpha_i + alpha_j) r^2 mathrmdr \n   = 2pi times 2 times frac12^2 sqrtfracpia^3 \n   = underlineleft( fracpialpha_i + alpha_j right)^32\nendaligned\n\nIntegral Formula:\n\nint_0^infty r^2n exp left(-a r^2right) mathrmdr = frac(2n-1)2^n+1 sqrtfracpia^2n+1\n\n\n\n\n\nelement(o::RestEnergy, SGB1::SimpleGaussianBasis, SGB2::SimpleGaussianBasis)\n\nbeginaligned\n  langle phi_i  mc^2  phi_j rangle\n  = mc^2 langle phi_i  phi_j rangle\n  = mc^2 iiint\n     phi_i^*(r)\n     phi_j(r)\n     r^2 sintheta mathrmdr mathrmdtheta mathrmdvarphi \n  = mc^2\n     int_0^2pi mathrmdvarphi\n     int_0^pi sintheta mathrmdtheta\n     int_0^infty r^2 mathrme^-(alpha_i + alpha_j) r^2 mathrmdr \n  = mc^2 times 2pi times 2 times frac12^2 sqrtfracpia^3 \n  = underlinemc^2 left( fracpialpha_i + alpha_j right)^32\nendaligned\n\nIntegral Formula:\n\n  int_0^infty r^2n exp left(-a r^2right) mathrmdr = frac(2n-1)2^n+1 sqrtfracpia^2n+1\n\n\n\n\n\nelement(o::NonRelativisticKinetic, SGB1::SimpleGaussianBasis, SGB2::SimpleGaussianBasis)\n\nbeginaligned\n   T_ij = langle phi_i  hatT  phi_j rangle\n   = iiint\n      mathrme^-alpha_i r^2\n      left -frachbar^22mu nabla^2 right\n      mathrme^-alpha_j r^2\n      r^2 sintheta mathrmdr mathrmdtheta mathrmdvarphi \n   = -frachbar^22mu iiint\n      mathrme^-alpha_i r^2\n      left nabla^2 right\n      mathrme^-alpha_j r^2\n      r^2 sintheta mathrmdr mathrmdtheta mathrmdvarphi \n   = -frachbar^22mu iiint\n      mathrme^-alpha_i r^2\n      left -6alpha_j + 4alpha_j^2 r^2 right\n      mathrme^-alpha_j r^2\n      r^2 sintheta mathrmdr mathrmdtheta mathrmdvarphi \n   = -frachbar^22mu iint\n      sintheta mathrmdtheta mathrmdvarphi\n      int\n      left -6alpha_j + 4alpha_j^2 r^2 right\n      r^2 mathrme^-(alpha_i + alpha_j) r^2\n      mathrmdr \n   = -frachbar^22mu cdot 4pi\n      left\n         -6alpha_j   mathrmGGI(2 alpha_i + alpha_j)\n         +4alpha_j^2 mathrmGGI(4 alpha_i + alpha_j)\n      right\n      \n   = -frachbar^22mu cdot 4pi\n      left\n         -6alpha_j   fracGammaleft( frac32 right)2 (alpha_i + alpha_j)^frac32\n         +4alpha_j^2 fracGammaleft( frac52 right)2 (alpha_i + alpha_j)^frac52\n      right \n   = -frachbar^22mu cdot 4pi\n      left\n         -6alpha_j   frac sqrtpi22 (alpha_i + alpha_j)^frac32\n         +4alpha_j^2 frac3sqrtpi42 (alpha_i + alpha_j)^frac52\n      right \n   = -frachbar^22mu cdot 4pi\n      left\n         fracalpha_jalpha_i + alpha_j - 1\n      right\n      cdot 6 alpha_j cdot fracsqrtpi22 (alpha_i + alpha_j)^frac32\n      \n   = -frachbar^22mu cdot 4pi\n      left\n         - fracalpha_ialpha_i + alpha_j\n      right\n      cdot 6 alpha_j cdot fracsqrtpi22 (alpha_i + alpha_j)^frac32\n      \n   = underline\n         -frachbar^22mu\n         cdot 6\n         cdot fracalpha_i alpha_j pi^frac32(alpha_i + alpha_j)^frac52\n      \nendaligned\n\nor\n\nbeginaligned\n   T_ij = langle phi_i  hatT  phi_j rangle\n   = iiint\n      mathrme^-alpha_i r^2\n      left -frachbar^22mu nabla^2 right\n      mathrme^-alpha_j r^2\n      r^2 sintheta mathrmdr mathrmdtheta mathrmdvarphi \n   = -frachbar^22mu iiint\n      mathrme^-alpha_i r^2\n      nabla^2\n      mathrme^-alpha_j r^2\n      r^2 sintheta mathrmdr mathrmdtheta mathrmdvarphi \n   = frachbar^22mu iiint\n      left nabla mathrme^-alpha_i r^2 right\n      left nabla mathrme^-alpha_j r^2 right\n      r^2 sintheta mathrmdr mathrmdtheta mathrmdvarphi \n   = frachbar^22mu iiint\n      left -2 alpha_i r mathrme^-alpha_i r^2 right\n      left -2 alpha_j r mathrme^-alpha_j r^2 right\n      r^2 sintheta mathrmdr mathrmdtheta mathrmdvarphi \n   = frachbar^22mu cdot 4 alpha_i alpha_j iiint\n      left r mathrme^-alpha_i r^2 right\n      left r mathrme^-alpha_j r^2 right\n      r^2 sintheta mathrmdr mathrmdtheta mathrmdvarphi \n   = frachbar^22mu\n      cdot 4 alpha_i alpha_j\n      iint sintheta mathrmdtheta mathrmdvarphi\n      int r^4\n      mathrme^- (alpha_i + alpha_j) r^2\n      mathrmdr \n   = frachbar^22mu\n      cdot 4 alpha_i alpha_j\n      cdot 4 pi\n      cdot mathrmGGI(4 alpha_i + alpha_j) \n   = frachbar^22mu\n      cdot 4 alpha_i alpha_j\n      cdot 4 pi\n      cdot fracGammaleft( frac52 right)2 (alpha_i + alpha_j)^frac52 \n   = frachbar^22mu\n      cdot 4 alpha_i alpha_j\n      cdot 4 pi\n      cdot frac3sqrtpi42 (alpha_i + alpha_j)^frac52 \n   = underline\n         frachbar^22mu\n         cdot 6\n         cdot fracalpha_i alpha_j pi^frac32(alpha_i + alpha_j)^frac52\n      \nendaligned\n\n\n\n\n\nelement(o::ConstantPotential, SGB1::SimpleGaussianBasis, SGB2::SimpleGaussianBasis)\n\nbeginaligned\n  langle phi_i  c  phi_j rangle\n  = c langle phi_i  phi_j rangle\n  = c iiint\n     phi_i^*(r)\n     phi_j(r)\n     r^2 sintheta mathrmdr mathrmdtheta mathrmdvarphi \n  = c\n     int_0^2pi mathrmdvarphi\n     int_0^pi sintheta mathrmdtheta\n     int_0^infty r^2 mathrme^-(alpha_i + alpha_j) r^2 mathrmdr \n  = c times 2pi times 2 times frac12^2 sqrtfracpia^3 \n  = underlinec left( fracpialpha_i + alpha_j right)^32\nendaligned\n\nIntegral Formula:\n\n  int_0^infty r^2n exp left(-a r^2right) mathrmdr = frac(2n-1)2^n+1 sqrtfracpia^2n+1\n\n\n\n\n\nelement(o::LinearPotential, SGB1::SimpleGaussianBasis, SGB2::SimpleGaussianBasis)\n\nbeginaligned\n   langle phi_i  r  phi_j rangle\n   = iiint\n      phi_i^*(r)\n      times r times\n      phi_j(r)\n      r^2 sintheta mathrmdr mathrmdtheta mathrmdvarphi \n   = int_0^2pi mathrmdvarphi\n      int_0^pi sintheta mathrmdtheta\n      int_0^infty r^3 mathrme^-(alpha_i + alpha_j) r^2 mathrmdr \n   = 2pi times 2 times frac12 (alpha_i + alpha_j)^2 \n   = underlinefrac2pi(alpha_i + alpha_j)^2\nendaligned\n\nIntegral Formula:\n\nbeginaligned\n    int_0^infty r^2n+1 exp left(-a r^2right) mathrmdr = fracn2 a^n+1\nendaligned\n\n\n\n\n\nelement(o::CoulombPotential, SGB1::SimpleGaussianBasis, SGB2::SimpleGaussianBasis)\n\nbeginaligned\n  langle phi_i  frac1r  phi_j rangle\n  = iiint\n    phi_i^*(r)\n    times frac1r times\n    phi_j(r)\n    r^2 sintheta mathrmdr mathrmdtheta mathrmdvarphi \n  = int_0^2pi mathrmdvarphi\n    int_0^pi sintheta mathrmdtheta\n    int_0^infty r mathrme^-(alpha_i + alpha_j) r^2 mathrmdr \n  = 2pi times 2 times frac02 (alpha_i + alpha_j) \n  = underlinefrac2pialpha_i + alpha_j\nendaligned\n\nIntegral Formula:\n\nbeginaligned\n  int_0^infty r^2n+1 exp left(-a r^2right) mathrmdr = fracn2 a^n+1\nendaligned\n\n\n\n\n\nelement(o::PowerLawPotential, SGB1::SimpleGaussianBasis, SGB2::SimpleGaussianBasis)\n\nbeginaligned\n   langle phi_i  r^n  phi_j rangle\n   = iiint\n      phi_i^*(r)\n      times r^n times\n      phi_j(r)\n      r^2 sintheta mathrmdr mathrmdtheta mathrmdvarphi \n   = int_0^2pi mathrmdvarphi\n      int_0^pi sintheta mathrmdtheta\n      int_0^infty r^n+2 mathrme^-(alpha_i + alpha_j) r^2 mathrmdr \n   = 2pi times 2 times fracGammaleft( fracn+32 right)2 (alpha_i + alpha_j)^fracn+32 \n   = underline2pifracGammaleft( fracn+32 right)(alpha_i + alpha_j)^fracn+32\nendaligned\n\nIntegral Formula:\n\nint_0^infty r^n exp left(-a r^2right) mathrmdr = fracGammaleft( fracn+12 right)2 a^fracn+12\n\n\n\n\n\nelement(o::GaussianPotential, SGB1::SimpleGaussianBasis, SGB2::SimpleGaussianBasis)\n\nbeginaligned\n  langle phi_i  exp(-br^2)  phi_j rangle\n  = iiint\n     phi_i^*(r)\n     times exp(-br^2) times\n     phi_j(r)\n     r^2 sintheta mathrmdr mathrmdtheta mathrmdvarphi \n  = int_0^2pi mathrmdvarphi\n     int_0^pi sintheta mathrmdtheta\n     int_0^infty r^2 mathrme^-(b+alpha_i + alpha_j) r^2 mathrmdr \n  = 2pi times 2 times frac12^2 sqrtfracpi(b + alpha_i + alpha_j)^2cdot1+1 \n  = underlineleft( fracpib + alpha_i + alpha_j right)^32\nendaligned\n\nIntegral Formula:\n\nint_0^infty r^2n exp left(-a r^2right) mathrmdr = frac(2n-1)2^n+1 sqrtfracpia^2n+1\n\n\n\n\n\nelement(o::Hamiltonian, SGB1::SimpleGaussianBasis, SGB2::SimpleGaussianBasis)\n\nbeginaligned\n  H_ij\n  = langle phi_i  hatH  phi_j rangle \n  = langle phi_i  sum_k hato_k  phi_j rangle \n  = sum_k langle phi_i  hato_k  phi_j rangle \nendaligned\n\n\n\n\n\n","category":"function"},{"location":"Hamiltonian/","page":"Hamiltonian","title":"Hamiltonian","text":"CurrentModule = TwoBody","category":"page"},{"location":"Hamiltonian/#Hamiltonian","page":"Hamiltonian","title":"Hamiltonian","text":"","category":"section"},{"location":"Hamiltonian/","page":"Hamiltonian","title":"Hamiltonian","text":"TwoBody.Hamiltonian","category":"page"},{"location":"Hamiltonian/#TwoBody.Hamiltonian-Hamiltonian","page":"Hamiltonian","title":"TwoBody.Hamiltonian","text":"Hamiltonian(operator1, operator2, ...)\n\nhatH = sum_i hato_i\n\nThe Hamiltonian is the input for each solver. This is an example for the non-relativistic Hamiltonian of hydrogen atom in atomic units:\n\nhatH = \n- frac12 nabla^2\n- frac1r\n\nhamiltonian = Hamiltonian(\n  NonRelativisticKinetic(ℏ =1 , m = 1),\n  CoulombPotential(coefficient = -1),\n)\n\n\n\n\n\n","category":"type"},{"location":"Hamiltonian/#Operators","page":"Hamiltonian","title":"Operators","text":"","category":"section"},{"location":"Hamiltonian/","page":"Hamiltonian","title":"Hamiltonian","text":"TwoBody.NonRelativisticKinetic\nTwoBody.RestEnergy\nTwoBody.RelativisticCorrection\nTwoBody.RelativisticKinetic\nTwoBody.ConstantPotential   \nTwoBody.LinearPotential     \nTwoBody.CoulombPotential    \nTwoBody.PowerLawPotential   \nTwoBody.GaussianPotential   \nTwoBody.ExponentialPotential\nTwoBody.YukawaPotential     \nTwoBody.DeltaPotential      \nTwoBody.FunctionPotential   \nTwoBody.UniformGridPotential","category":"page"},{"location":"Hamiltonian/#TwoBody.NonRelativisticKinetic-Hamiltonian","page":"Hamiltonian","title":"TwoBody.NonRelativisticKinetic","text":"NonRelativisticKinetic(ℏ=1, m=1)\n\n-frachbar^22m nabla^2\n\n\n\n\n\n","category":"type"},{"location":"Hamiltonian/#TwoBody.RestEnergy-Hamiltonian","page":"Hamiltonian","title":"TwoBody.RestEnergy","text":"RestEnergy(c=1, m=1)\n\nm c^2\n\nUse c = 137.035999177 (from 2022 CODATA) in the atomic units.\n\n\n\n\n\n","category":"type"},{"location":"Hamiltonian/#TwoBody.RelativisticCorrection-Hamiltonian","page":"Hamiltonian","title":"TwoBody.RelativisticCorrection","text":"RelativisticCorrection(c=1, m=1, n=2) The p^{2n} term of the Taylor expansion:\n\nbeginaligned\n  sqrtp^2 c^2 + m^2 c^4\n  = m times c^2 \n  + 1  2    m         times p^2 (n=1) \n  - 1  8    m^3  c^2 times p^4 (n=2) \n  + 1  16   m^5  c^4 times p^6 (n=3) \n  - 5  128  m^7  c^6 times p^8 (n=4) \n  + cdots\nendaligned\n\nUse c = 137.035999177 (from 2022 CODATA) in the atomic units.\n\n\n\n\n\n","category":"type"},{"location":"Hamiltonian/#TwoBody.RelativisticKinetic-Hamiltonian","page":"Hamiltonian","title":"TwoBody.RelativisticKinetic","text":"RelativisticKinetic(c=1, m=1)\n\nsqrtp^2 c^2 + m^2 c^4 - m c^2\n\nUse c = 137.035999177 (from 2022 CODATA) in the atomic units.\n\n\n\n\n\n","category":"type"},{"location":"Hamiltonian/#TwoBody.ConstantPotential-Hamiltonian","page":"Hamiltonian","title":"TwoBody.ConstantPotential","text":"ConstantPotential(constant=1)\n\n+ mathrmconst\n\n\n\n\n\n","category":"type"},{"location":"Hamiltonian/#TwoBody.LinearPotential-Hamiltonian","page":"Hamiltonian","title":"TwoBody.LinearPotential","text":"LinearPotential(coefficient=1)\n\n+ mathrmcoeff times r \n\n\n\n\n\n","category":"type"},{"location":"Hamiltonian/#TwoBody.CoulombPotential-Hamiltonian","page":"Hamiltonian","title":"TwoBody.CoulombPotential","text":"CoulombPotential(coefficient=1)\n\n+ mathrmcoeff times frac1r\n\n\n\n\n\n","category":"type"},{"location":"Hamiltonian/#TwoBody.PowerLawPotential-Hamiltonian","page":"Hamiltonian","title":"TwoBody.PowerLawPotential","text":"PowerLawPotential(coefficient=1, exponent=1)\n\n+ mathrmcoeff times r^mathrmexpon\n\n\n\n\n\n","category":"type"},{"location":"Hamiltonian/#TwoBody.GaussianPotential-Hamiltonian","page":"Hamiltonian","title":"TwoBody.GaussianPotential","text":"GaussianPotential(coefficient=1, exponent=1)\n\n+ mathrmcoeff times exp(- mathrmexpon times r^2)\n\n\n\n\n\n","category":"type"},{"location":"Hamiltonian/#TwoBody.ExponentialPotential-Hamiltonian","page":"Hamiltonian","title":"TwoBody.ExponentialPotential","text":"ExponentialPotential(coefficient=1, exponent=1)\n\n+ mathrmcoeff times exp(- mathrmexpon times r)\n\n\n\n\n\n","category":"type"},{"location":"Hamiltonian/#TwoBody.YukawaPotential-Hamiltonian","page":"Hamiltonian","title":"TwoBody.YukawaPotential","text":"YukawaPotential(coefficient=1, exponent=1)\n\n+ mathrmcoeff times exp(- mathrmexpon times r)  r\n\n\n\n\n\n","category":"type"},{"location":"Hamiltonian/#TwoBody.DeltaPotential-Hamiltonian","page":"Hamiltonian","title":"TwoBody.DeltaPotential","text":"DeltaPotential(coefficient=1)\n\n+ mathrmcoeff times δ(r)\n\n\n\n\n\n","category":"type"},{"location":"Hamiltonian/#TwoBody.FunctionPotential-Hamiltonian","page":"Hamiltonian","title":"TwoBody.FunctionPotential","text":"FunctionPotential(f)\n\n+ f(r)\n\n\n\n\n\n","category":"type"},{"location":"Hamiltonian/#TwoBody.UniformGridPotential-Hamiltonian","page":"Hamiltonian","title":"TwoBody.UniformGridPotential","text":"UniformGridPotential(R, V)\n\n\n\n\n\n","category":"type"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = TwoBody","category":"page"},{"location":"#TwoBody.jl","page":"Home","title":"TwoBody.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: Stable) (Image: Dev) (Image: Build Status)","category":"page"},{"location":"","page":"Home","title":"Home","text":"TwoBody.jl: a Julia package for two-body problems","category":"page"},{"location":"#Install","page":"Home","title":"Install","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Run the following code on the REPL or Jupyter Notebook to install this package.","category":"page"},{"location":"","page":"Home","title":"Home","text":"import Pkg; Pkg.add(url=\"https://github.com/ohno/TwoBody.jl.git\")","category":"page"},{"location":"#Usage","page":"Home","title":"Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Run the following code before each use.","category":"page"},{"location":"","page":"Home","title":"Home","text":"using TwoBody","category":"page"},{"location":"","page":"Home","title":"Home","text":"Define the Hamiltoninan. This is an example for the non-relativistic Hamiltonian of hydrogen atom in atomic units:","category":"page"},{"location":"","page":"Home","title":"Home","text":"hatH = \n- frac12 nabla^2\n- frac1r","category":"page"},{"location":"","page":"Home","title":"Home","text":"hamiltonian = Hamiltonian(\n  NonRelativisticKinetic(ℏ = 1 , m = 1),\n  CoulombPotential(coefficient = -1),\n)\nnothing # hide","category":"page"},{"location":"","page":"Home","title":"Home","text":"The usage depends on the method. Define the basis set for the Rayleigh–Ritz method:","category":"page"},{"location":"","page":"Home","title":"Home","text":"beginaligned\n  phi_1(r) = exp(-1300773 r^2) \n  phi_2(r) = exp(-1962079 r^2) \n  phi_3(r) = exp(-0444529 r^2) \n  phi_4(r) = exp(-01219492 r^2)\nendaligned","category":"page"},{"location":"","page":"Home","title":"Home","text":"basisset = BasisSet(\n  SimpleGaussianBasis(13.00773),\n  SimpleGaussianBasis(1.962079),\n  SimpleGaussianBasis(0.444529),\n  SimpleGaussianBasis(0.1219492),\n)\nnothing # hide","category":"page"},{"location":"","page":"Home","title":"Home","text":"You should find","category":"page"},{"location":"","page":"Home","title":"Home","text":"E_n=1 = -0499278E_mathrmh","category":"page"},{"location":"","page":"Home","title":"Home","text":"which is amazingly good for only four basis functions according to Thijssen(2007). The exact ground-state energy is -05E_mathrmh.","category":"page"},{"location":"","page":"Home","title":"Home","text":"solve(hamiltonian, basisset)","category":"page"},{"location":"#API-reference","page":"Home","title":"API reference","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"API/","page":"API reference","title":"API reference","text":"CurrentModule = TwoBody","category":"page"},{"location":"API/#API-reference","page":"API reference","title":"API reference","text":"","category":"section"},{"location":"API/","page":"API reference","title":"API reference","text":"","category":"page"},{"location":"API/","page":"API reference","title":"API reference","text":"Modules = [TwoBody]","category":"page"},{"location":"API/#TwoBody.Basis","page":"API reference","title":"TwoBody.Basis","text":"Basis is an abstract type.\n\n\n\n\n\n","category":"type"},{"location":"API/#TwoBody.BasisSet","page":"API reference","title":"TwoBody.BasisSet","text":"BasisSet(basis1, basis2, ...)\n\n phi_1 phi_2 phi_3 cdots  \n\nThe basis set is the input for Rayleigh–Ritz method. You can define the basis set like this:\n\nbeginaligned\n  phi_1(r) = exp(-1300773 r^2) \n  phi_2(r) = exp(-1962079 r^2) \n  phi_3(r) = exp(-0444529 r^2) \n  phi_4(r) = exp(-01219492 r^2)\nendaligned\n\nbasisset = BasisSet(\n  SimpleGaussianBasis(13.00773),\n  SimpleGaussianBasis(1.962079),\n  SimpleGaussianBasis(0.444529),\n  SimpleGaussianBasis(0.1219492),\n)\n\n\n\n\n\n","category":"type"},{"location":"API/#TwoBody.ConstantPotential","page":"API reference","title":"TwoBody.ConstantPotential","text":"ConstantPotential(constant=1)\n\n+ mathrmconst\n\n\n\n\n\n","category":"type"},{"location":"API/#TwoBody.ContractedBasis","page":"API reference","title":"TwoBody.ContractedBasis","text":"ContractedBasis([c1, c2, ...], [basis1, basis2, ...])\n\nphi = sum_i c_i phi_i\n\n\n\n\n\n","category":"type"},{"location":"API/#TwoBody.CoulombPotential","page":"API reference","title":"TwoBody.CoulombPotential","text":"CoulombPotential(coefficient=1)\n\n+ mathrmcoeff times frac1r\n\n\n\n\n\n","category":"type"},{"location":"API/#TwoBody.DeltaPotential","page":"API reference","title":"TwoBody.DeltaPotential","text":"DeltaPotential(coefficient=1)\n\n+ mathrmcoeff times δ(r)\n\n\n\n\n\n","category":"type"},{"location":"API/#TwoBody.ExponentialPotential","page":"API reference","title":"TwoBody.ExponentialPotential","text":"ExponentialPotential(coefficient=1, exponent=1)\n\n+ mathrmcoeff times exp(- mathrmexpon times r)\n\n\n\n\n\n","category":"type"},{"location":"API/#TwoBody.FunctionPotential","page":"API reference","title":"TwoBody.FunctionPotential","text":"FunctionPotential(f)\n\n+ f(r)\n\n\n\n\n\n","category":"type"},{"location":"API/#TwoBody.GaussianBasis","page":"API reference","title":"TwoBody.GaussianBasis","text":"GaussianBasis(a=1, l=0, m=0)\n\nphi_i(r θ φ) = N _il r^l exp(-a_i r^2) Y_l^m(θ φ)\n\n\n\n\n\n","category":"type"},{"location":"API/#TwoBody.GaussianPotential","page":"API reference","title":"TwoBody.GaussianPotential","text":"GaussianPotential(coefficient=1, exponent=1)\n\n+ mathrmcoeff times exp(- mathrmexpon times r^2)\n\n\n\n\n\n","category":"type"},{"location":"API/#TwoBody.GeometricBasisSet","page":"API reference","title":"TwoBody.GeometricBasisSet","text":"GeometricBasisSet(basistype, r₁, rₙ, n; nₘₐₓ=n, nₘᵢₙ=1) This is a basis set with exponentials generated by geometric().\n\n\n\n\n\n","category":"type"},{"location":"API/#TwoBody.Hamiltonian","page":"API reference","title":"TwoBody.Hamiltonian","text":"Hamiltonian(operator1, operator2, ...)\n\nhatH = sum_i hato_i\n\nThe Hamiltonian is the input for each solver. This is an example for the non-relativistic Hamiltonian of hydrogen atom in atomic units:\n\nhatH = \n- frac12 nabla^2\n- frac1r\n\nhamiltonian = Hamiltonian(\n  NonRelativisticKinetic(ℏ =1 , m = 1),\n  CoulombPotential(coefficient = -1),\n)\n\n\n\n\n\n","category":"type"},{"location":"API/#TwoBody.LinearPotential","page":"API reference","title":"TwoBody.LinearPotential","text":"LinearPotential(coefficient=1)\n\n+ mathrmcoeff times r \n\n\n\n\n\n","category":"type"},{"location":"API/#TwoBody.NonRelativisticKinetic","page":"API reference","title":"TwoBody.NonRelativisticKinetic","text":"NonRelativisticKinetic(ℏ=1, m=1)\n\n-frachbar^22m nabla^2\n\n\n\n\n\n","category":"type"},{"location":"API/#TwoBody.Operator","page":"API reference","title":"TwoBody.Operator","text":"Operator is an abstract type.\n\n\n\n\n\n","category":"type"},{"location":"API/#TwoBody.PowerLawPotential","page":"API reference","title":"TwoBody.PowerLawPotential","text":"PowerLawPotential(coefficient=1, exponent=1)\n\n+ mathrmcoeff times r^mathrmexpon\n\n\n\n\n\n","category":"type"},{"location":"API/#TwoBody.PrimitiveBasis","page":"API reference","title":"TwoBody.PrimitiveBasis","text":"PrimitiveBasis <: Basis is an abstract type.\n\n\n\n\n\n","category":"type"},{"location":"API/#TwoBody.RelativisticCorrection","page":"API reference","title":"TwoBody.RelativisticCorrection","text":"RelativisticCorrection(c=1, m=1, n=2) The p^{2n} term of the Taylor expansion:\n\nbeginaligned\n  sqrtp^2 c^2 + m^2 c^4\n  = m times c^2 \n  + 1  2    m         times p^2 (n=1) \n  - 1  8    m^3  c^2 times p^4 (n=2) \n  + 1  16   m^5  c^4 times p^6 (n=3) \n  - 5  128  m^7  c^6 times p^8 (n=4) \n  + cdots\nendaligned\n\nUse c = 137.035999177 (from 2022 CODATA) in the atomic units.\n\n\n\n\n\n","category":"type"},{"location":"API/#TwoBody.RelativisticKinetic","page":"API reference","title":"TwoBody.RelativisticKinetic","text":"RelativisticKinetic(c=1, m=1)\n\nsqrtp^2 c^2 + m^2 c^4 - m c^2\n\nUse c = 137.035999177 (from 2022 CODATA) in the atomic units.\n\n\n\n\n\n","category":"type"},{"location":"API/#TwoBody.RestEnergy","page":"API reference","title":"TwoBody.RestEnergy","text":"RestEnergy(c=1, m=1)\n\nm c^2\n\nUse c = 137.035999177 (from 2022 CODATA) in the atomic units.\n\n\n\n\n\n","category":"type"},{"location":"API/#TwoBody.SimpleGaussianBasis","page":"API reference","title":"TwoBody.SimpleGaussianBasis","text":"SimpleGaussianBasis(a=1)\n\nphi_i(r) = exp(-a_i r^2)\n\nNote: This basis is not normalized. This is only for s-wave.\n\n\n\n\n\n","category":"type"},{"location":"API/#TwoBody.UniformGridPotential","page":"API reference","title":"TwoBody.UniformGridPotential","text":"UniformGridPotential(R, V)\n\n\n\n\n\n","category":"type"},{"location":"API/#TwoBody.YukawaPotential","page":"API reference","title":"TwoBody.YukawaPotential","text":"YukawaPotential(coefficient=1, exponent=1)\n\n+ mathrmcoeff times exp(- mathrmexpon times r)  r\n\n\n\n\n\n","category":"type"},{"location":"API/#TwoBody.element-Tuple{ConstantPotential, SimpleGaussianBasis, SimpleGaussianBasis}","page":"API reference","title":"TwoBody.element","text":"element(o::ConstantPotential, SGB1::SimpleGaussianBasis, SGB2::SimpleGaussianBasis)\n\nbeginaligned\n  langle phi_i  c  phi_j rangle\n  = c langle phi_i  phi_j rangle\n  = c iiint\n     phi_i^*(r)\n     phi_j(r)\n     r^2 sintheta mathrmdr mathrmdtheta mathrmdvarphi \n  = c\n     int_0^2pi mathrmdvarphi\n     int_0^pi sintheta mathrmdtheta\n     int_0^infty r^2 mathrme^-(alpha_i + alpha_j) r^2 mathrmdr \n  = c times 2pi times 2 times frac12^2 sqrtfracpia^3 \n  = underlinec left( fracpialpha_i + alpha_j right)^32\nendaligned\n\nIntegral Formula:\n\n  int_0^infty r^2n exp left(-a r^2right) mathrmdr = frac(2n-1)2^n+1 sqrtfracpia^2n+1\n\n\n\n\n\n","category":"method"},{"location":"API/#TwoBody.element-Tuple{CoulombPotential, SimpleGaussianBasis, SimpleGaussianBasis}","page":"API reference","title":"TwoBody.element","text":"element(o::CoulombPotential, SGB1::SimpleGaussianBasis, SGB2::SimpleGaussianBasis)\n\nbeginaligned\n  langle phi_i  frac1r  phi_j rangle\n  = iiint\n    phi_i^*(r)\n    times frac1r times\n    phi_j(r)\n    r^2 sintheta mathrmdr mathrmdtheta mathrmdvarphi \n  = int_0^2pi mathrmdvarphi\n    int_0^pi sintheta mathrmdtheta\n    int_0^infty r mathrme^-(alpha_i + alpha_j) r^2 mathrmdr \n  = 2pi times 2 times frac02 (alpha_i + alpha_j) \n  = underlinefrac2pialpha_i + alpha_j\nendaligned\n\nIntegral Formula:\n\nbeginaligned\n  int_0^infty r^2n+1 exp left(-a r^2right) mathrmdr = fracn2 a^n+1\nendaligned\n\n\n\n\n\n","category":"method"},{"location":"API/#TwoBody.element-Tuple{GaussianPotential, SimpleGaussianBasis, SimpleGaussianBasis}","page":"API reference","title":"TwoBody.element","text":"element(o::GaussianPotential, SGB1::SimpleGaussianBasis, SGB2::SimpleGaussianBasis)\n\nbeginaligned\n  langle phi_i  exp(-br^2)  phi_j rangle\n  = iiint\n     phi_i^*(r)\n     times exp(-br^2) times\n     phi_j(r)\n     r^2 sintheta mathrmdr mathrmdtheta mathrmdvarphi \n  = int_0^2pi mathrmdvarphi\n     int_0^pi sintheta mathrmdtheta\n     int_0^infty r^2 mathrme^-(b+alpha_i + alpha_j) r^2 mathrmdr \n  = 2pi times 2 times frac12^2 sqrtfracpi(b + alpha_i + alpha_j)^2cdot1+1 \n  = underlineleft( fracpib + alpha_i + alpha_j right)^32\nendaligned\n\nIntegral Formula:\n\nint_0^infty r^2n exp left(-a r^2right) mathrmdr = frac(2n-1)2^n+1 sqrtfracpia^2n+1\n\n\n\n\n\n","category":"method"},{"location":"API/#TwoBody.element-Tuple{Hamiltonian, Basis, Basis}","page":"API reference","title":"TwoBody.element","text":"element(o::Hamiltonian, SGB1::SimpleGaussianBasis, SGB2::SimpleGaussianBasis)\n\nbeginaligned\n  H_ij\n  = langle phi_i  hatH  phi_j rangle \n  = langle phi_i  sum_k hato_k  phi_j rangle \n  = sum_k langle phi_i  hato_k  phi_j rangle \nendaligned\n\n\n\n\n\n","category":"method"},{"location":"API/#TwoBody.element-Tuple{LinearPotential, SimpleGaussianBasis, SimpleGaussianBasis}","page":"API reference","title":"TwoBody.element","text":"element(o::LinearPotential, SGB1::SimpleGaussianBasis, SGB2::SimpleGaussianBasis)\n\nbeginaligned\n   langle phi_i  r  phi_j rangle\n   = iiint\n      phi_i^*(r)\n      times r times\n      phi_j(r)\n      r^2 sintheta mathrmdr mathrmdtheta mathrmdvarphi \n   = int_0^2pi mathrmdvarphi\n      int_0^pi sintheta mathrmdtheta\n      int_0^infty r^3 mathrme^-(alpha_i + alpha_j) r^2 mathrmdr \n   = 2pi times 2 times frac12 (alpha_i + alpha_j)^2 \n   = underlinefrac2pi(alpha_i + alpha_j)^2\nendaligned\n\nIntegral Formula:\n\nbeginaligned\n    int_0^infty r^2n+1 exp left(-a r^2right) mathrmdr = fracn2 a^n+1\nendaligned\n\n\n\n\n\n","category":"method"},{"location":"API/#TwoBody.element-Tuple{NonRelativisticKinetic, SimpleGaussianBasis, SimpleGaussianBasis}","page":"API reference","title":"TwoBody.element","text":"element(o::NonRelativisticKinetic, SGB1::SimpleGaussianBasis, SGB2::SimpleGaussianBasis)\n\nbeginaligned\n   T_ij = langle phi_i  hatT  phi_j rangle\n   = iiint\n      mathrme^-alpha_i r^2\n      left -frachbar^22mu nabla^2 right\n      mathrme^-alpha_j r^2\n      r^2 sintheta mathrmdr mathrmdtheta mathrmdvarphi \n   = -frachbar^22mu iiint\n      mathrme^-alpha_i r^2\n      left nabla^2 right\n      mathrme^-alpha_j r^2\n      r^2 sintheta mathrmdr mathrmdtheta mathrmdvarphi \n   = -frachbar^22mu iiint\n      mathrme^-alpha_i r^2\n      left -6alpha_j + 4alpha_j^2 r^2 right\n      mathrme^-alpha_j r^2\n      r^2 sintheta mathrmdr mathrmdtheta mathrmdvarphi \n   = -frachbar^22mu iint\n      sintheta mathrmdtheta mathrmdvarphi\n      int\n      left -6alpha_j + 4alpha_j^2 r^2 right\n      r^2 mathrme^-(alpha_i + alpha_j) r^2\n      mathrmdr \n   = -frachbar^22mu cdot 4pi\n      left\n         -6alpha_j   mathrmGGI(2 alpha_i + alpha_j)\n         +4alpha_j^2 mathrmGGI(4 alpha_i + alpha_j)\n      right\n      \n   = -frachbar^22mu cdot 4pi\n      left\n         -6alpha_j   fracGammaleft( frac32 right)2 (alpha_i + alpha_j)^frac32\n         +4alpha_j^2 fracGammaleft( frac52 right)2 (alpha_i + alpha_j)^frac52\n      right \n   = -frachbar^22mu cdot 4pi\n      left\n         -6alpha_j   frac sqrtpi22 (alpha_i + alpha_j)^frac32\n         +4alpha_j^2 frac3sqrtpi42 (alpha_i + alpha_j)^frac52\n      right \n   = -frachbar^22mu cdot 4pi\n      left\n         fracalpha_jalpha_i + alpha_j - 1\n      right\n      cdot 6 alpha_j cdot fracsqrtpi22 (alpha_i + alpha_j)^frac32\n      \n   = -frachbar^22mu cdot 4pi\n      left\n         - fracalpha_ialpha_i + alpha_j\n      right\n      cdot 6 alpha_j cdot fracsqrtpi22 (alpha_i + alpha_j)^frac32\n      \n   = underline\n         -frachbar^22mu\n         cdot 6\n         cdot fracalpha_i alpha_j pi^frac32(alpha_i + alpha_j)^frac52\n      \nendaligned\n\nor\n\nbeginaligned\n   T_ij = langle phi_i  hatT  phi_j rangle\n   = iiint\n      mathrme^-alpha_i r^2\n      left -frachbar^22mu nabla^2 right\n      mathrme^-alpha_j r^2\n      r^2 sintheta mathrmdr mathrmdtheta mathrmdvarphi \n   = -frachbar^22mu iiint\n      mathrme^-alpha_i r^2\n      nabla^2\n      mathrme^-alpha_j r^2\n      r^2 sintheta mathrmdr mathrmdtheta mathrmdvarphi \n   = frachbar^22mu iiint\n      left nabla mathrme^-alpha_i r^2 right\n      left nabla mathrme^-alpha_j r^2 right\n      r^2 sintheta mathrmdr mathrmdtheta mathrmdvarphi \n   = frachbar^22mu iiint\n      left -2 alpha_i r mathrme^-alpha_i r^2 right\n      left -2 alpha_j r mathrme^-alpha_j r^2 right\n      r^2 sintheta mathrmdr mathrmdtheta mathrmdvarphi \n   = frachbar^22mu cdot 4 alpha_i alpha_j iiint\n      left r mathrme^-alpha_i r^2 right\n      left r mathrme^-alpha_j r^2 right\n      r^2 sintheta mathrmdr mathrmdtheta mathrmdvarphi \n   = frachbar^22mu\n      cdot 4 alpha_i alpha_j\n      iint sintheta mathrmdtheta mathrmdvarphi\n      int r^4\n      mathrme^- (alpha_i + alpha_j) r^2\n      mathrmdr \n   = frachbar^22mu\n      cdot 4 alpha_i alpha_j\n      cdot 4 pi\n      cdot mathrmGGI(4 alpha_i + alpha_j) \n   = frachbar^22mu\n      cdot 4 alpha_i alpha_j\n      cdot 4 pi\n      cdot fracGammaleft( frac52 right)2 (alpha_i + alpha_j)^frac52 \n   = frachbar^22mu\n      cdot 4 alpha_i alpha_j\n      cdot 4 pi\n      cdot frac3sqrtpi42 (alpha_i + alpha_j)^frac52 \n   = underline\n         frachbar^22mu\n         cdot 6\n         cdot fracalpha_i alpha_j pi^frac32(alpha_i + alpha_j)^frac52\n      \nendaligned\n\n\n\n\n\n","category":"method"},{"location":"API/#TwoBody.element-Tuple{PowerLawPotential, SimpleGaussianBasis, SimpleGaussianBasis}","page":"API reference","title":"TwoBody.element","text":"element(o::PowerLawPotential, SGB1::SimpleGaussianBasis, SGB2::SimpleGaussianBasis)\n\nbeginaligned\n   langle phi_i  r^n  phi_j rangle\n   = iiint\n      phi_i^*(r)\n      times r^n times\n      phi_j(r)\n      r^2 sintheta mathrmdr mathrmdtheta mathrmdvarphi \n   = int_0^2pi mathrmdvarphi\n      int_0^pi sintheta mathrmdtheta\n      int_0^infty r^n+2 mathrme^-(alpha_i + alpha_j) r^2 mathrmdr \n   = 2pi times 2 times fracGammaleft( fracn+32 right)2 (alpha_i + alpha_j)^fracn+32 \n   = underline2pifracGammaleft( fracn+32 right)(alpha_i + alpha_j)^fracn+32\nendaligned\n\nIntegral Formula:\n\nint_0^infty r^n exp left(-a r^2right) mathrmdr = fracGammaleft( fracn+12 right)2 a^fracn+12\n\n\n\n\n\n","category":"method"},{"location":"API/#TwoBody.element-Tuple{RestEnergy, SimpleGaussianBasis, SimpleGaussianBasis}","page":"API reference","title":"TwoBody.element","text":"element(o::RestEnergy, SGB1::SimpleGaussianBasis, SGB2::SimpleGaussianBasis)\n\nbeginaligned\n  langle phi_i  mc^2  phi_j rangle\n  = mc^2 langle phi_i  phi_j rangle\n  = mc^2 iiint\n     phi_i^*(r)\n     phi_j(r)\n     r^2 sintheta mathrmdr mathrmdtheta mathrmdvarphi \n  = mc^2\n     int_0^2pi mathrmdvarphi\n     int_0^pi sintheta mathrmdtheta\n     int_0^infty r^2 mathrme^-(alpha_i + alpha_j) r^2 mathrmdr \n  = mc^2 times 2pi times 2 times frac12^2 sqrtfracpia^3 \n  = underlinemc^2 left( fracpialpha_i + alpha_j right)^32\nendaligned\n\nIntegral Formula:\n\n  int_0^infty r^2n exp left(-a r^2right) mathrmdr = frac(2n-1)2^n+1 sqrtfracpia^2n+1\n\n\n\n\n\n","category":"method"},{"location":"API/#TwoBody.element-Tuple{SimpleGaussianBasis, SimpleGaussianBasis}","page":"API reference","title":"TwoBody.element","text":"element(SGB1::SimpleGaussianBasis, SGB2::SimpleGaussianBasis)\n\nbeginaligned\n   S_ij\n    = langle phi_i  phi_j rangle\n   = iiint\n      phi_i^*(r)\n      phi_j(r)\n      r^2 sintheta mathrmdr mathrmdtheta mathrmdvarphi \n   = int_0^2pi mathrmdvarphi\n      int_0^pi sintheta mathrmdtheta\n      int_0^infty r^2 mathrme^-(alpha_i + alpha_j) r^2 mathrmdr \n   = 2pi times 2 times frac12^2 sqrtfracpia^3 \n   = underlineleft( fracpialpha_i + alpha_j right)^32\nendaligned\n\nIntegral Formula:\n\nint_0^infty r^2n exp left(-a r^2right) mathrmdr = frac(2n-1)2^n+1 sqrtfracpia^2n+1\n\n\n\n\n\n","category":"method"},{"location":"API/#TwoBody.geometric-Tuple{Any, Any, Int64}","page":"API reference","title":"TwoBody.geometric","text":"Exponents of Gaussian basis functions are given by geometric progression:\n\nbeginaligned\n   v_i = frac1r_i^2 \n   r_i = r_1 a^i-1\nendaligned\n\nThis function return array of nu_i:\n\n(r_1 r_n n n_mathrmmax) mapsto (nu_1 nu_2 cdots nu_n-1 nu_n nu_n+1 cdots nu_n_mathrmmax)\n\nUsually n = n_mathrmmax. Set nn_mathrmmax if you want to extend the geometric progression.\n\nExamples:\n\njulia> ν = TwoBody.geometric(0.1, 10.0, 5)\n5-element Vector{Float64}:\n 100.0\n  10.0\n   0.9999999999999997\n   0.09999999999999996\n   0.009999999999999995\n\njulia> ν = TwoBody.geometric(0.1, 10.0, 5, nₘₐₓ = 10)\n10-element Vector{Float64}:\n 100.0\n  10.0\n   0.9999999999999997\n   0.09999999999999996\n   0.009999999999999995\n   0.0009999999999999994\n   9.999999999999994e-5\n   9.999999999999992e-6\n   9.999999999999991e-7\n   9.999999999999988e-8\n\n\n\n\n\n","category":"method"},{"location":"API/#TwoBody.optimize-Tuple{Hamiltonian, GeometricBasisSet}","page":"API reference","title":"TwoBody.optimize","text":"optimize(hamiltonian::Hamiltonian, basisset::GeometricBasisSet; perturbation=Hamiltonian(), info=4, optimizer=Optim.NelderMead()) This function minimizes the energy by optimizing r_1 and r_n using Optim.jl.\n\nfracpartial Epartial r_1 = fracpartial Epartial r_n = 0\n\n\n\n\n\n","category":"method"},{"location":"API/#TwoBody.solve-Tuple{Hamiltonian, BasisSet}","page":"API reference","title":"TwoBody.solve","text":"solve(hamiltonian::Hamiltonian, basisset::BasisSet)\n\nThis function returns the eigenvalues E  and eigenvectors pmbc for\n\npmbH pmbc = E pmbS pmbc\n\nThe Hamiltonian matrix is defined as H_ij = langle phi_i  hatH  phi_j rangle. The overlap matrix is defined as S_ij = langle phi_i  phi_j rangle.\n\n\n\n\n\n","category":"method"},{"location":"API/#TwoBody.solve-Tuple{Hamiltonian, GeometricBasisSet}","page":"API reference","title":"TwoBody.solve","text":"solve(hamiltonian::Hamiltonian, basisset::GeometricBasisSet; perturbation=Hamiltonian(), info=4) This function is a wrapper for solve(hamiltonian::Hamiltonian, basisset::BasisSet, ...).\n\n\n\n\n\n","category":"method"}]
}
